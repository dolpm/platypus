hi --> vector[vector[int]]
; ModuleID = 'Platypus'
source_filename = "Platypus"

%struct.Vector = type { i32, i32, i8* }

@fmt_nl = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@str = private unnamed_addr constant [12 x i8] c"freeing box\00", align 1

declare i32 @printf(i8*, ...)

declare %struct.Vector* @Vector_new()

declare void @Vector_push(%struct.Vector*, i8**)

declare void @Vector_pop(%struct.Vector*)

declare i8** @Vector_get(%struct.Vector*, i32)

declare void @Vector_free(%struct.Vector*)

define void @main() {
entry:
  %Vector_new = call %struct.Vector* @Vector_new()
  %v = alloca %struct.Vector*, align 8
  store %struct.Vector* %Vector_new, %struct.Vector** %v, align 8
  %Vector_new1 = call %struct.Vector* @Vector_new()
  %inner = alloca %struct.Vector*, align 8
  store %struct.Vector* %Vector_new1, %struct.Vector** %inner, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32))
  %malloc_of_t = bitcast i8* %malloccall to i32*
  store i32 6, i32* %malloc_of_t, align 4
  %malloc_casted_to_void = bitcast i32* %malloc_of_t to i8*
  %ref_of_malloc = alloca i8*, align 8
  store i8* %malloc_casted_to_void, i8** %ref_of_malloc, align 8
  %inner2 = load %struct.Vector*, %struct.Vector** %inner, align 8
  call void @Vector_push(%struct.Vector* %inner2, i8** %ref_of_malloc)
  %malloccall3 = tail call i8* @malloc(i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32))
  %malloc_of_t4 = bitcast i8* %malloccall3 to i32*
  store i32 7, i32* %malloc_of_t4, align 4
  %malloc_casted_to_void5 = bitcast i32* %malloc_of_t4 to i8*
  %ref_of_malloc6 = alloca i8*, align 8
  store i8* %malloc_casted_to_void5, i8** %ref_of_malloc6, align 8
  %inner7 = load %struct.Vector*, %struct.Vector** %inner, align 8
  call void @Vector_push(%struct.Vector* %inner7, i8** %ref_of_malloc6)
  %v8 = load %struct.Vector*, %struct.Vector** %v, align 8
  %malloccall9 = tail call i8* @malloc(i32 ptrtoint (%struct.Vector** getelementptr (%struct.Vector*, %struct.Vector** null, i32 1) to i32))
  %malloc_of_t10 = bitcast i8* %malloccall9 to %struct.Vector**
  store %struct.Vector* %v8, %struct.Vector** %malloc_of_t10, align 8
  %b = alloca %struct.Vector**, align 8
  store %struct.Vector** %malloc_of_t10, %struct.Vector*** %b, align 8
  %v_struct = load %struct.Vector*, %struct.Vector** %v, align 8
  %v_len = getelementptr inbounds %struct.Vector, %struct.Vector* %v_struct, i32 0, i32 0
  %stored_v_len = load i32, i32* %v_len, align 4
  %cur_item = alloca i32, align 4
  store i32 0, i32* %cur_item, align 4
  br label %free_while

free_while:                                       ; preds = %free_while_body, %entry
  %x13 = load i32, i32* %cur_item, align 4
  %free_loop_cond = icmp slt i32 %x13, %stored_v_len
  br i1 %free_loop_cond, label %free_while_body, label %free_merge

free_while_body:                                  ; preds = %free_while
  %x = load i32, i32* %cur_item, align 4
  %vector_item = call i8** @Vector_get(%struct.Vector* %v_struct, i32 %x)
  %vector_item_as_type = bitcast i8** %vector_item to %struct.Vector*
  %ptr_to_inner = alloca %struct.Vector*, align 8
  store %struct.Vector* %vector_item_as_type, %struct.Vector** %ptr_to_inner, align 8
  %v_struct11 = load %struct.Vector*, %struct.Vector** %ptr_to_inner, align 8
  call void @Vector_free(%struct.Vector* %v_struct11)
  %x12 = load i32, i32* %cur_item, align 4
  %add = add i32 %x12, 1
  store i32 %add, i32* %cur_item, align 4
  br label %free_while

free_merge:                                       ; preds = %free_while
  call void @Vector_free(%struct.Vector* %v_struct)
  %0 = bitcast %struct.Vector* %v_struct to i8*
  tail call void @free(i8* %0)
  %v_struct14 = load %struct.Vector*, %struct.Vector** %inner, align 8
  call void @Vector_free(%struct.Vector* %v_struct14)
  %1 = bitcast %struct.Vector* %v_struct14 to i8*
  tail call void @free(i8* %1)
  %box_malloc_to_free = load %struct.Vector**, %struct.Vector*** %b, align 8
  %box_inner_ptr = alloca %struct.Vector*, align 8
  %box_malloc_inner = load %struct.Vector*, %struct.Vector** %box_malloc_to_free, align 8
  store %struct.Vector* %box_malloc_inner, %struct.Vector** %box_inner_ptr, align 8
  %v_struct15 = load %struct.Vector*, %struct.Vector** %box_inner_ptr, align 8
  %v_len16 = getelementptr inbounds %struct.Vector, %struct.Vector* %v_struct15, i32 0, i32 0
  %stored_v_len17 = load i32, i32* %v_len16, align 4
  %cur_item18 = alloca i32, align 4
  store i32 0, i32* %cur_item18, align 4
  br label %free_while19

free_while19:                                     ; preds = %free_while_body20, %free_merge
  %x28 = load i32, i32* %cur_item18, align 4
  %free_loop_cond29 = icmp slt i32 %x28, %stored_v_len17
  br i1 %free_loop_cond29, label %free_while_body20, label %free_merge30

free_while_body20:                                ; preds = %free_while19
  %x21 = load i32, i32* %cur_item18, align 4
  %vector_item22 = call i8** @Vector_get(%struct.Vector* %v_struct15, i32 %x21)
  %vector_item_as_type23 = bitcast i8** %vector_item22 to %struct.Vector*
  %ptr_to_inner24 = alloca %struct.Vector*, align 8
  store %struct.Vector* %vector_item_as_type23, %struct.Vector** %ptr_to_inner24, align 8
  %v_struct25 = load %struct.Vector*, %struct.Vector** %ptr_to_inner24, align 8
  call void @Vector_free(%struct.Vector* %v_struct25)
  %x26 = load i32, i32* %cur_item18, align 4
  %add27 = add i32 %x26, 1
  store i32 %add27, i32* %cur_item18, align 4
  br label %free_while19

free_merge30:                                     ; preds = %free_while19
  call void @Vector_free(%struct.Vector* %v_struct15)
  %2 = bitcast %struct.Vector** %box_malloc_to_free to i8*
  tail call void @free(i8* %2)
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt_nl, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str, i32 0, i32 0))
  ret void
}

declare noalias i8* @malloc(i32)

declare void @free(i8*)
