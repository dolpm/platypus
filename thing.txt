source_filename = "./bin/vec.c"

%struct.Vector = type { i32, i32, i8* }

@.str = private unnamed_addr constant [18 x i8] c"index < v->length\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"./bin/vec.c\00", align 1
@__PRETTY_FUNCTION__.Vector_get = private unnamed_addr constant [39 x i8] c"void *Vector_get(struct Vector *, int)\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"v->length > 0\00", align 1
@__PRETTY_FUNCTION__.Vector_pop = private unnamed_addr constant [34 x i8] c"void *Vector_pop(struct Vector *)\00", align 1
@fmt_nl = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.Vector* @Vector_alloc() #0 {
  %1 = alloca %struct.Vector*, align 8
  %2 = call noalias i8* @malloc(i64 noundef 16) #4
  %3 = bitcast i8* %2 to %struct.Vector*
  store %struct.Vector* %3, %struct.Vector** %1, align 8
  %4 = load %struct.Vector*, %struct.Vector** %1, align 8
  %5 = getelementptr inbounds %struct.Vector, %struct.Vector* %4, i32 0, i32 1
  store i32 10, i32* %5, align 4
  %6 = load %struct.Vector*, %struct.Vector** %1, align 8
  %7 = getelementptr inbounds %struct.Vector, %struct.Vector* %6, i32 0, i32 0
  store i32 0, i32* %7, align 8
  %8 = load %struct.Vector*, %struct.Vector** %1, align 8
  %9 = getelementptr inbounds %struct.Vector, %struct.Vector* %8, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = sext i32 %10 to i64
  %12 = mul i64 %11, 8
  %13 = call noalias i8* @malloc(i64 noundef %12) #4
  %14 = load %struct.Vector*, %struct.Vector** %1, align 8
  %15 = getelementptr inbounds %struct.Vector, %struct.Vector* %14, i32 0, i32 2
  store i8* %13, i8** %15, align 8
  %16 = load %struct.Vector*, %struct.Vector** %1, align 8
  ret %struct.Vector* %16
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @Vector_get(%struct.Vector* noundef %0, i32 noundef %1) #0 {
  %3 = alloca %struct.Vector*, align 8
  %4 = alloca i32, align 4
  store %struct.Vector* %0, %struct.Vector** %3, align 8
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %6 = load %struct.Vector*, %struct.Vector** %3, align 8
  %7 = getelementptr inbounds %struct.Vector, %struct.Vector* %6, i32 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp slt i32 %5, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %2
  br label %12

11:                                               ; preds = %2
  call void @__assert_fail(i8* noundef getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i32 noundef 23, i8* noundef getelementptr inbounds ([39 x i8], [39 x i8]* @__PRETTY_FUNCTION__.Vector_get, i64 0, i64 0)) #5
  unreachable

12:                                               ; preds = %10
  %13 = load %struct.Vector*, %struct.Vector** %3, align 8
  %14 = getelementptr inbounds %struct.Vector, %struct.Vector* %13, i32 0, i32 2
  %15 = load i8*, i8** %14, align 8
  %16 = load i32, i32* %4, align 4
  %17 = sext i32 %16 to i64
  %18 = mul i64 %17, 8
  %19 = getelementptr i8, i8* %15, i64 %18
  %20 = bitcast i8* %19 to i8**
  %21 = load i8*, i8** %20, align 8
  ret i8* %21
}

; Function Attrs: noreturn nounwind
declare void @__assert_fail(i8* noundef, i8* noundef, i32 noundef, i8* noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @Vector_free(%struct.Vector* noundef %0) #0 {
  %2 = alloca %struct.Vector*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store %struct.Vector* %0, %struct.Vector** %2, align 8
  store i32 0, i32* %3, align 4
  br label %5

5:                                                ; preds = %22, %1
  %6 = load i32, i32* %3, align 4
  %7 = load %struct.Vector*, %struct.Vector** %2, align 8
  %8 = getelementptr inbounds %struct.Vector, %struct.Vector* %7, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp slt i32 %6, %9
  br i1 %10, label %11, label %25

11:                                               ; preds = %5
  %12 = load %struct.Vector*, %struct.Vector** %2, align 8
  %13 = getelementptr inbounds %struct.Vector, %struct.Vector* %12, i32 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = load i32, i32* %3, align 4
  %16 = sext i32 %15 to i64
  %17 = mul i64 %16, 8
  %18 = getelementptr i8, i8* %14, i64 %17
  %19 = bitcast i8* %18 to i8**
  %20 = load i8*, i8** %19, align 8
  store i8* %20, i8** %4, align 8
  %21 = load i8*, i8** %4, align 8
  call void @free(i8* noundef %21) #4
  br label %22

22:                                               ; preds = %11
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %3, align 4
  br label %5, !llvm.loop !5

25:                                               ; preds = %5
  %26 = load %struct.Vector*, %struct.Vector** %2, align 8
  %27 = getelementptr inbounds %struct.Vector, %struct.Vector* %26, i32 0, i32 2
  %28 = load i8*, i8** %27, align 8
  call void @free(i8* noundef %28) #4
  %29 = load %struct.Vector*, %struct.Vector** %2, align 8
  %30 = bitcast %struct.Vector* %29 to i8*
  call void @free(i8* noundef %30) #4
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @Vector_grow(%struct.Vector* noundef %0) #0 {
  %2 = alloca %struct.Vector*, align 8
  store %struct.Vector* %0, %struct.Vector** %2, align 8
  %3 = load %struct.Vector*, %struct.Vector** %2, align 8
  %4 = getelementptr inbounds %struct.Vector, %struct.Vector* %3, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = mul nsw i32 %5, 2
  %7 = load %struct.Vector*, %struct.Vector** %2, align 8
  %8 = getelementptr inbounds %struct.Vector, %struct.Vector* %7, i32 0, i32 1
  store i32 %6, i32* %8, align 4
  %9 = load %struct.Vector*, %struct.Vector** %2, align 8
  %10 = getelementptr inbounds %struct.Vector, %struct.Vector* %9, i32 0, i32 2
  %11 = load i8*, i8** %10, align 8
  %12 = load %struct.Vector*, %struct.Vector** %2, align 8
  %13 = getelementptr inbounds %struct.Vector, %struct.Vector* %12, i32 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = sext i32 %14 to i64
  %16 = mul i64 %15, 8
  %17 = call i8* @realloc(i8* noundef %11, i64 noundef %16) #4
  %18 = load %struct.Vector*, %struct.Vector** %2, align 8
  %19 = getelementptr inbounds %struct.Vector, %struct.Vector* %18, i32 0, i32 2
  store i8* %17, i8** %19, align 8
  ret void
}

; Function Attrs: nounwind
declare i8* @realloc(i8* noundef, i64 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @Vector_shrink(%struct.Vector* noundef %0) #0 {
  %2 = alloca %struct.Vector*, align 8
  store %struct.Vector* %0, %struct.Vector** %2, align 8
  %3 = load %struct.Vector*, %struct.Vector** %2, align 8
  %4 = getelementptr inbounds %struct.Vector, %struct.Vector* %3, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = sdiv i32 %5, 2
  %7 = load %struct.Vector*, %struct.Vector** %2, align 8
  %8 = getelementptr inbounds %struct.Vector, %struct.Vector* %7, i32 0, i32 1
  store i32 %6, i32* %8, align 4
  %9 = load %struct.Vector*, %struct.Vector** %2, align 8
  %10 = getelementptr inbounds %struct.Vector, %struct.Vector* %9, i32 0, i32 2
  %11 = load i8*, i8** %10, align 8
  %12 = load %struct.Vector*, %struct.Vector** %2, align 8
  %13 = getelementptr inbounds %struct.Vector, %struct.Vector* %12, i32 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = sext i32 %14 to i64
  %16 = mul i64 %15, 8
  %17 = call i8* @realloc(i8* noundef %11, i64 noundef %16) #4
  %18 = load %struct.Vector*, %struct.Vector** %2, align 8
  %19 = getelementptr inbounds %struct.Vector, %struct.Vector* %18, i32 0, i32 2
  store i8* %17, i8** %19, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @Vector_push(%struct.Vector* noundef %0, i8** noundef %1) #0 {
  %3 = alloca %struct.Vector*, align 8
  %4 = alloca i8**, align 8
  %5 = alloca i8*, align 8
  store %struct.Vector* %0, %struct.Vector** %3, align 8
  store i8** %1, i8*** %4, align 8
  %6 = load %struct.Vector*, %struct.Vector** %3, align 8
  %7 = getelementptr inbounds %struct.Vector, %struct.Vector* %6, i32 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = add nsw i32 %8, 1
  %10 = load %struct.Vector*, %struct.Vector** %3, align 8
  %11 = getelementptr inbounds %struct.Vector, %struct.Vector* %10, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp sge i32 %9, %12
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = load %struct.Vector*, %struct.Vector** %3, align 8
  call void @Vector_grow(%struct.Vector* noundef %15)
  br label %16

16:                                               ; preds = %14, %2
  %17 = load %struct.Vector*, %struct.Vector** %3, align 8
  %18 = getelementptr inbounds %struct.Vector, %struct.Vector* %17, i32 0, i32 2
  %19 = load i8*, i8** %18, align 8
  %20 = load %struct.Vector*, %struct.Vector** %3, align 8
  %21 = getelementptr inbounds %struct.Vector, %struct.Vector* %20, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = sext i32 %22 to i64
  %24 = mul i64 %23, 8
  %25 = getelementptr i8, i8* %19, i64 %24
  store i8* %25, i8** %5, align 8
  %26 = load i8*, i8** %5, align 8
  %27 = load i8**, i8*** %4, align 8
  %28 = bitcast i8** %27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 8 %28, i64 8, i1 false)
  store i8* %26, i8** %5, align 8
  %29 = load %struct.Vector*, %struct.Vector** %3, align 8
  %30 = getelementptr inbounds %struct.Vector, %struct.Vector* %29, i32 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %30, align 8
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @Vector_pop(%struct.Vector* noundef %0) #0 {
  %2 = alloca %struct.Vector*, align 8
  %3 = alloca i8*, align 8
  store %struct.Vector* %0, %struct.Vector** %2, align 8
  %4 = load %struct.Vector*, %struct.Vector** %2, align 8
  %5 = getelementptr inbounds %struct.Vector, %struct.Vector* %4, i32 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %1
  br label %10

9:                                                ; preds = %1
  call void @__assert_fail(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i32 noundef 60, i8* noundef getelementptr inbounds ([34 x i8], [34 x i8]* @__PRETTY_FUNCTION__.Vector_pop, i64 0, i64 0)) #5
  unreachable

10:                                               ; preds = %8
  %11 = load %struct.Vector*, %struct.Vector** %2, align 8
  %12 = load %struct.Vector*, %struct.Vector** %2, align 8
  %13 = getelementptr inbounds %struct.Vector, %struct.Vector* %12, i32 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = sub nsw i32 %14, 1
  %16 = call i8* @Vector_get(%struct.Vector* noundef %11, i32 noundef %15)
  store i8* %16, i8** %3, align 8
  %17 = load %struct.Vector*, %struct.Vector** %2, align 8
  %18 = getelementptr inbounds %struct.Vector, %struct.Vector* %17, i32 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = add nsw i32 %19, -1
  store i32 %20, i32* %18, align 8
  %21 = load %struct.Vector*, %struct.Vector** %2, align 8
  %22 = getelementptr inbounds %struct.Vector, %struct.Vector* %21, i32 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = load %struct.Vector*, %struct.Vector** %2, align 8
  %25 = getelementptr inbounds %struct.Vector, %struct.Vector* %24, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = sdiv i32 %26, 2
  %28 = icmp slt i32 %23, %27
  br i1 %28, label %29, label %31

29:                                               ; preds = %10
  %30 = load %struct.Vector*, %struct.Vector** %2, align 8
  call void @Vector_shrink(%struct.Vector* noundef %30)
  br label %31

31:                                               ; preds = %29, %10
  %32 = load i8*, i8** %3, align 8
  ret i8* %32
}

declare i32 @printf(i8*, ...)

define void @main() {
entry:
  %x = alloca i32, align 4
  store i32 3, i32* %x, align 4
  %x1 = load i32, i32* %x, align 4
  %negated_value = sub i32 0, %x1
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %negated_value)
  %y = alloca i1, align 1
  store i1 true, i1* %y, align 1
  %y2 = load i1, i1* %y, align 1
  %boolean_negated_value = xor i1 %y2, true
  %printf3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i1 %boolean_negated_value)
  %z = alloca i32, align 4
  store i32 5, i32* %z, align 4
  %z4 = load i32, i32* %z, align 4
  %ref = alloca i32, align 4
  store i32 %z4, i32* %ref, align 4
  %a = alloca i32*, align 8
  store i32* %ref, i32** %a, align 8
  %a5 = load i32*, i32** %a, align 8
  %derefed_value = load i32, i32* %a5, align 4
  %printf6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %derefed_value)
  %z7 = load i32, i32* %z, align 4
  %ref8 = alloca i32, align 4
  store i32 %z7, i32* %ref8, align 4
  %a9 = alloca i32*, align 8
  store i32* %ref8, i32** %a9, align 8
  %a10 = load i32*, i32** %a9, align 8
  %derefed_value11 = load i32, i32* %a10, align 4
  %printf12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %derefed_value11)
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { argmemonly nofree nounwind willreturn }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.mustprogress"}
