pipe print_vec |> [] |> [arr: &vector[int]] |> unit {
  int v_len <| Vector_length <| [arr];
  Print <| ["["];
  loop 0->(v_len - 1) as i {
    Print <| [Vector_get <| [arr, %i]];
    if (i != v_len - 1) {
      Print <| [","];
    }
  }
  Printnl <| ["]"];  
  |> ();
}

pipe merge |> [] |> [arr: ~&vector[int], l: int, m: int, r: int] |> unit {
  int n1 <| (m - l) + 1;
  int n2 <| r - m;

  mut vector[int] left <| Vector_new <| [];
  mut vector[int] right <| Vector_new <| [];

  loop 0->(n1 - 1) as i {
    Vector_push <| [~&left, %@Vector_get_mut <| [arr, l + i]];
  }
  
  loop 0->(n2 - 1) as i {
    Vector_push <| [~&right, %@Vector_get_mut <| [arr, m + i + 1]];
  }

  mut int i <| 0;
  mut int j <| 0;
  mut int k <| l;

  while (i < n1 and j < n2) {
    &int l_item <| Vector_get <| [&left, %i];
    &int r_item <| Vector_get <| [&right, %j];

    ~&int k_setter <| Vector_get_mut <| [arr, %k];
    if (@l_item < @r_item) {
      @k_setter <| %@l_item;
      i <| i + 1;
    } else {
      @k_setter <| %@r_item;
      j <| j + 1;
    }
    
    k <| k + 1;
  }

  while (i < n1) {
    ~&int k_setter <| Vector_get_mut <| [arr, %k];
    @k_setter <| %@(Vector_get <| [&left, %i]);
    i <| i + 1;
    k <| k + 1;
  }

  while (j < n2) {
    ~&int k_setter <| Vector_get_mut <| [arr, %k];
    @k_setter <| %@(Vector_get <| [&right, %j]);
    j <| j + 1;
    k <| k + 1;
  }

  |> ();
}

pipe merge_sort |> [] |> [arr: ~&vector[int], l: int, r: int] |> unit {
  if (l < r) {
    int m <| l + (r - l) / 2;
    merge_sort <| [arr, %l, %m];
    merge_sort <| [arr, m + 1, %r];
    merge <| [arr, l, m, r];
  }
  |> ();
}

pipe validate_sort |> [] |> [arr: &vector[int]] |> bool {
  loop 1->((Vector_length <| [arr]) - 1) as i {
    if (@(Vector_get <| [arr, i-1]) > @(Vector_get <| [arr, %i])) {
      |> false;
    }
  }
  |> true;
}

pipe create_vec_of_size |> [] |> [size: int] |> vector[int] {
  mut vector[int] nums <| Vector_new <| [];
  loop 0->(size-1) as i {
    Vector_push <| [~&nums, Rng_generate <| [0, 100000]];
  }
  |> nums;
}

pipe main |> [] |> [] |> unit {
  /* initialize rng with seed */
  Rng_init <| [1337];

  int len <| 200;
  
  mut vector[int] nums <| create_vec_of_size <| [%len];

  Print <| ["unsorted: "];
  print_vec <| [&nums];

  merge_sort <| [~&nums, 0, len - 1];

  Print <| ["sorted: "];
  print_vec <| [&nums];

  Printnl <| [""];
  if (validate_sort <| [&nums]) {
    Printnl <| ["Successfully sorted integers."];
  } else {
    Printnl <| ["Integer sort was unsuccessful."];
  }
  
  |> ();
}
